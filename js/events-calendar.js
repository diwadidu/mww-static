(()=>{var e={263:e=>{function t(e){if(e)return function(e){for(var n in t.prototype)e[n]=t.prototype[n];return e}(e)}e.exports=t,t.prototype.on=t.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},t.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},t.prototype.off=t.prototype.removeListener=t.prototype.removeAllListeners=t.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var a=0;a<r.length;a++)if((n=r[a])===t||n.fn===t){r.splice(a,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},t.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var a=(n=n.slice(0)).length;r<a;++r)n[r].apply(this,t)}return this},t.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},t.prototype.hasListeners=function(e){return!!this.listeners(e).length}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(263),t=n.n(e);function r(e){let t=new Date(e);return`${t.getFullYear()}-${a(t.getMonth()+1)}-${a(t.getDate())}`}function a(e,t=2){return t||(t=2),`00${e}`.substr(-1*t)}function s(e,t){return`${a(e,4)}-${a(t)}`}const o=(e,t)=>(++e>12&&(e=1,t++),{month:e,year:t}),i=(e,t)=>(--e<1&&(e=12,t--),{month:e,year:t});class h extends Error{}class l{constructor(){this.serverDomain=window.location.origin,this.eventStorage={},this.loadEventsWorker=null,this.pathToWorkerLoader="/js/workers",this.shouldLoadFromServer=(e,t)=>!this.eventStorage[`${s(e,t)}`],this.loadEventsForMonth=(e,t)=>this.loadEventsWorker.postMessage({year:e,month:t,domain:this.serverDomain}),this.processWorkerMessage=e=>{if("error"!==e.type)this.cacheEvents(e.data),this.emitDataAvailableEvent(e.data.month);else{const t=new h(e.data.msg);this.emit("eventDataError",t)}},this.cacheEvents=e=>this.eventStorage[e.month]=e,this.preloadAdjacentMonthsEvents=(e,t,n=[-1,1])=>{(function(e){let t;return"number"==typeof e?t=Array.from({length:e},((e,t)=>t)):"string"==typeof e?t=Array.from({length:parseInt(e,10)||0},((e,t)=>t)):Array.isArray(e)?t=e:console.error("Parameter has unknown format",e,typeof e),{from:(e,n)=>t.map((t=>{const r=new Date(e,n-1,1,0,0,0);return new Date(r.setMonth(r.getMonth()+1+t))})),until:(e,n)=>t.map((t=>{const r=new Date(e,n-1,1,0,0,0);return new Date(r.setMonth(r.getMonth()-1-t))})),withFixed:(e,n)=>t.map((t=>{const r=new Date(n,e-1,1,0,0,0);return new Date(r.setMonth(r.getMonth()+t))}))}})(n).withFixed(e,t).map(r).forEach((e=>{const t=e.substr(0,7);if(!this.eventStorage[t]){const{year:e,month:n}=function(e){const[t,n]=e.split("-");return{year:parseInt(t,10),month:parseInt(n,10),yearMonthId:e.substr(0,7)}}(t);this.loadEventsForMonth(e,n)}}))},this.getMonthEventsForDateFromCache=e=>{const t=e.substr(0,7);return this.hasData(e)?this.eventStorage[t].events[e]:[]},this.hasData=e=>{const t=e.substr(0,7);return this.eventStorage[t]&&this.eventStorage[t].events[e]},this.startWebWorker()}startWebWorker(){const e=`${this.serverDomain}${this.pathToWorkerLoader}/event-data-loader.worker.js`;this.loadEventsWorker=new Worker(e),this.loadEventsWorker.onmessage=this.processWorkerMessage,this.loadEventsWorker.onerror=e=>console.warn("Error",e),this.loadEventsWorker.onmessageerror=e=>console.warn("MessageError",e)}getAllEventsInYearMonth(e,t){this.shouldLoadFromServer(e,t)?this.loadEventsForMonth(e,t):this.emitDataAvailableEvent(`${e}-${t}`)}emitDataAvailableEvent(e){const t=(n=e,{get year(){return parseInt(n.split("-")[0],10)},get month(){return parseInt(n.split("-")[1],10)},get yearStr(){return n.split("-")[0]},get monthStr(){return n.split("-")[1]},get day(){return n.split("-")[2]?n.split("-")[2]:1},get yearMonthId(){return n.substr(0,7)}});var n;const r={month:t.yearMonthId,eventsInMonth:this.eventStorage[t.yearMonthId]};this.emit("eventsForMonthAvailable",r)}}t()(l.prototype);const d=l;class c{constructor(){this.eventDisplayLimit=3,this.monthNames=["","January","February","March","April","May","June","July","August","September","October","November","December"],this.dayElement='<td class="{{ dateStyle }}" data-date="{{ calendarDate }}"><a href="{{ calendarDate }}" class="event-day">{{ day }}</a>{{ events }}</td>',this.eventList='<li><a href="{{ url }}" target="_blank">{{ linkLabel }}</a></li>',this.header='<div class="calendar-month"><a class="calendar-prevmonth" onclick="previous()">Prev</a><h2>{{ month }} {{ year }}</h2><a class="calendar-nextmonth" onclick="next()">Next</a></div>'}createHtmlFor(e,t){return n=>{const r=this.replaceTagInHtmlString("month",this.monthNames[t],this.header),a=this.replaceTagInHtmlString("year",e,r),s=document.createElement("div");s.innerHTML=a;const o=document.createElement("table");o.setAttribute("class","event-calendar"),o.setAttribute("id","event-calendar");const i=document.createElement("thead");i.innerHTML=this.generateTableHeader();const h=document.createElement("tbody");h.innerHTML=this.generateCalendarRows(n,e,t).join(""),o.appendChild(i),o.appendChild(h);const l=document.createElement("div");return l.setAttribute("class","cal-container"),l.appendChild(s),l.appendChild(o),o.onclick=e=>{if("a"!==e.target.nodeName.toLowerCase()){const t=this.returnTableCellNode(e.path).getAttribute("data-date"),n=new CustomEvent("calendarClicked",{detail:{type:"date-clicked",dateRequested:t}});window.dispatchEvent(n)}},l}}returnTableCellNode(e){let t=0;for(;e[t]&&("td"!==(n=e[t]).nodeName.toLowerCase()||!n.className.toLowerCase().includes("current-month"));)t++;var n;if(!e[t])throw new Exception("Table call node not found");return e[t]}generateTableHeader(){return"<tr>"+["Mon","Tue","Wed","Thu","Fri","Sat","Sun"].map((e=>`<td>${e}</td>`)).join("")+"</tr>"}generateCalendarRows(e,t,n){return e.map(((e,r)=>"<tr>"+e.reduce(this.renderCalendarDay(r,t,n).bind(this),"")+"</tr>"))}renderCalendarDay(e,t,n){return(a,s)=>{const o=[0,6].includes(new Date(t,n-1,s.date).getDay())?"weekend-day ":"";let i=this.replaceTagInHtmlString("events",this.renderEventsForDay(s.events),this.dayElement);if(i=this.replaceTagInHtmlString("day",s.date,i),0===e&&parseInt(s.date,10)>20)i=this.replaceTagInHtmlString("dateStyle",`${o}bordering-month`,i),i=this.removeAttributeFromHtmlString("data-date",i);else if(e>3&&parseInt(s.date,10)<7)i=this.replaceTagInHtmlString("dateStyle",`${o}bordering-month`,i),i=this.removeAttributeFromHtmlString("data-date",i);else{i=this.replaceTagInHtmlString("dateStyle",`${o}current-month`,i);let e=new Date(t,n-1,s.date);i=this.replaceTagInHtmlString("calendarDate",r(e),i)}return a+i}}replaceTagInHtmlString(e,t,n){const r="\\{\\{\\s*"+e+"\\s*\\}\\}";return(n||this.dayElement).replace(new RegExp(r,"g"),t)}removeAttributeFromHtmlString(e,t){const n=`${e}="[^"]+"`;return t.replace(new RegExp(n),"")}renderEventsForDay(e){return!e||e.length<1?"":e.length<=this.eventDisplayLimit&&window.innerWidth>600?this.renderEventsAsList(e):this.renderEventsAsCount(e)}renderEventsAsList(e){let t=[];for(let n of e){let e=this.replaceTagInHtmlString("url",n.links[0].url,this.eventList);t.push(this.replaceTagInHtmlString("linkLabel",n.name,e))}return'<ul class="events-daylist">'+t.join("")+"</ul>"}renderEventsAsCount(e){return`<div><p>${e.length} Events</p></div>`}generateComponentStyles(){const e=document.createElement("style");return e.setAttribute("type","text/css"),e.textContent='\n.event-calendar {width:100%;border-collapse:collapse;}\n.event-calendar thead td {height: 30px;border-top: 1px solid #7292ba;border-bottom: 1px solid #7292ba;color: #333;text-align:center}\n.event-calendar tbody:before {content: "-"; display: block; line-height: 1em; color: transparent;}\n.event-calendar tbody td {height:180px;vertical-align:top;padding-top:30px}\n.event-calendar td {overflow:hidden;position:relative;width: 14.3%;height:180px;border:1px solid #eee}\ntd span {font-size: 15px;position:relative;top:40%}\ntd.div {height:100%;display:inline-block}\ntd.bordering-month {background:#ccc;}\n.event-day {position: absolute;top: 0px;display: block;width: 100%;text-align:left;background-color: #7292ba;padding: 0.3em 6%;color: #eee;text-decoration:none}\n.cal-container {padding:0 3%;}\n.calendar-month > * {display: inline-block}\n.calendar-month {text-align:center;}\n.calendar-month > a {margin: 0 10px;}\n.calendar-month > h2 {width:180px;text-align:center;}\n\n.weekend-day {\n    background-color: #b2d2fa;\n}\n\n    @media screen and (max-width: 600px) {\n    .event-calendar tbody td {\n        height: 90px;\n        font-size: 13px;\n        text-align: center;\n    }\n',e}}class p extends HTMLElement{constructor(){super(),this.currentYear=void 0,this.currentMonth=void 0,this.renderCal=new c,this.eventRepository=new d,this.currentMonthsEvents=void 0,this.minDesktopWidth=601,this.isMobile=window.innerWidth<this.minDesktopWidth,this.gotoMonth=e=>()=>{const{month:t,year:n}=e(this.currentMonth,this.currentYear);this.currentMonth=t,this.currentYear=n,this.changeUrlParameters(t,n)},this.shadow=this.attachShadow({mode:"open"}),window.onresize=this.rerenderOnResize.bind(this)}connectedCallback(){this.shadow.appendChild(this.renderCal.generateComponentStyles());const{year:e,month:t}=this.findMonthYearToRender();this.currentMonth=t,this.currentYear=e,this.changeUrlParameters(this.currentMonth,this.currentYear),window.addEventListener("calendarClicked",this.dateClickListener.bind(this)),this.eventRepository.on("eventsForMonthAvailable",(e=>{this.renderCalendar(e.eventsInMonth)})),this.eventRepository.on("eventDataError",(e=>{console.error("Error from Repo",e),this.renderCalendar({})})),window.previous=this.gotoMonth(i.bind(this)),window.next=this.gotoMonth(o.bind(this))}changeUrlParameters(e,t){const n=`?month=${e}&year=${t}`;window.history.pushState({month:e,year:t},"Calendar",n),this.eventRepository.getAllEventsInYearMonth(this.currentYear,this.currentMonth),this.eventRepository.preloadAdjacentMonthsEvents(this.currentMonth,this.currentYear),this.renderCalendar({})}rerenderOnResize(e){const t=window.innerWidth;(this.isMobile&&t>this.minDesktopWidth-1||!this.isMobile&&t<this.minDesktopWidth)&&(this.isMobile=window.innerWidth<this.minDesktopWidth,this.rerenderCalendar())}disconnectedCallback(){window.removeEventListener("calendarClicked",this.dateClickListener.bind(this))}findMonthYearToRender(){let{year:e,month:t}=this.parseUrlParams();return t=t>12||isNaN(t)?(new Date).getMonth()+1:t,e=e<2020||e>2060||isNaN(e)?(new Date).getFullYear():e,{year:e,month:t}}parseUrlParams(){const e=window.location.search.substr(1),t={};return e.replace(/([\w\d]+)=([^&]+)/g,((e,n,r)=>{t[n]=isNaN(r)?r:parseInt(r,10)})),t}rerenderCalendar(){if(!this.currentMonthsEvents)throw new Error("Cannot rerender without data");this.renderCalendar(this.currentMonthsEvents)}renderCalendar(e){this.currentMonthsEvents=e,window.removeEventListener("calendarClicked",this.dateClickListener);const t=this.calcMonth(this.currentYear,this.currentMonth),n=this.renderCal.createHtmlFor(this.currentYear,this.currentMonth)(t);for(let e of this.shadow.children)"string"==typeof e.type&&"text/css"===e.type||this.shadow.removeChild(e);this.shadow.appendChild(n)}calcMonth(e,t){let n=[];const r=this.createFirstCalendarRow(e,t);n.push(r.row);let a=0;do{n.push(this.createCalendarRowStartingAt(r.lastDate+1+7*a)),a++}while(r.lastDate+7*a<this.getLastDateOfMonth(e,t));return this.correctLastRowOf(n,e,t),n}createFirstCalendarRow(e,t){const n=`${e}-${a(t)}-01T00:00:00`,r=new Date(n).getDay(),s=this.getLastDateOfPreviousMonth(e,t);let o;if(1===r)this.createCalendarRowStartingAt(1),o=[];else if(0===r)o=[...Array(6).keys()].map((e=>this.createDayObject(s-5+e,!1)));else{const e=s-r;o=[...Array(r-1).keys()].map((t=>this.createDayObject(t+e+2,!1)))}const i=7-o.length,h=[...Array(i).keys()].map((e=>this.createDayObject(e+1)));return{lastDate:i,row:[...o,...h]}}createCalendarRowStartingAt(e){return[...Array(7).keys()].map((t=>this.createDayObject(t+e)))}createDayObject(e,t=!0){const n=`${s(this.currentYear,this.currentMonth)}-${a(e)}`;return{date:e,isSelectedMonth:t,events:t?this.eventRepository.getMonthEventsForDateFromCache(n):[]}}getLastDateOfPreviousMonth(e,t){t>12&&(e++,t=1);const n=`00${t}`.substr(-2);return new Date(new Date(`${e}-${n}-01`).setHours(-1)).getDate()}getLastDateOfMonth(e,t){const n=parseInt(e,10),r=parseInt(t,10);return this.getLastDateOfPreviousMonth(n,r+1)}correctLastRowOf(e,t,n){const r=this.getLastDateOfMonth(t,n),a=e.length-1;e[a]=e[a].map((e=>e.date>r?this.createDayObject(e.date-r,!1):e))}dateClickListener(e){const t=e.detail;if("date-clicked"===t.type){const e=t.dateRequested,n=this.eventRepository.getMonthEventsForDateFromCache(e),r=new CustomEvent("events-for-date",{bubbles:!0,composed:!0,detail:{events:n,date:e}});this.dispatchEvent(r)}}}customElements.define("events-calendar",p)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,